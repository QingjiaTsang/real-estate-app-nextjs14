// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Note: id would be the user's id from the auth provider, so no need for @default(cuid())
  id        String   @id
  email     String   @unique
  firstName String
  lastName  String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties Property[]
}

model Property {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Decimal @db.Decimal(10, 2)

  // one-to-many relationship: one user can have many properties
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // one-to-many relationship: one property type can have many properties
  typeId String
  type   PropertyType @relation(fields: [typeId], references: [id])

  // one-to-many relationship: one property status can have many properties
  statusId String
  status   PropertyStatus @relation(fields: [statusId], references: [id])

  // one-to-one relationship: one property can have one location
  locationId String           @unique
  location   PropertyLocation @relation(fields: [locationId], references: [id])

  // one-to-one relationship: one property can have one feature
  featureId String          @unique
  feature   PropertyFeature @relation(fields: [featureId], references: [id])

  // one-to-many relationship: one property can have many pictures
  pictures PropertyPicture[]

  // one-to-one relationship: one property can have one contact
  contactId String          @unique
  contact   PropertyContact @relation(fields: [contactId], references: [id])
}

model PropertyType {
  id    String @id @default(cuid())
  value String

  properties Property[]
}

model PropertyStatus {
  id    String @id @default(cuid())
  value String

  properties Property[]
}

model PropertyLocation {
  id        String @id @default(cuid())
  address   String
  city      String
  state     String
  zip       String
  landmarks String
  country   String

  property Property?
}

model PropertyFeature {
  id                String  @id @default(cuid())
  bedrooms          Int
  bathrooms         Int
  parkingSpots      Int
  area              Int
  hasSwimmingPool   Boolean
  hasGardenOrYard   Boolean
  hasBalconyOrPatio Boolean

  property Property?
}

model PropertyPicture {
  id  String @id @default(cuid())
  url String

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model PropertyContact {
  id    String @id @default(cuid())
  name  String
  phone String
  email String

  property Property?
}
